diff --git a/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcher.java b/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcher.java
index 25906c6..788fade 100644
--- a/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcher.java
+++ b/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcher.java
@@ -45,33 +45,50 @@
 						"java.lang.Class", "java.lang.String", "boolean"))
 				.target(new MethodTarget("org.eclipse.osgi.internal.loader.ModuleClassLoader", "loadClass",
 						"java.lang.Class", "java.lang.String", "boolean"))
+				.target(new MethodTarget("org.sonar.classloader.ClassRealm", "loadClass",
+						"java.lang.Class", "java.lang.String", "boolean"))
 				.decisionMethod(new Hook(TRANSPLANTS_CLASS_NAME, "overrideLoadDecide", "boolean", "java.lang.ClassLoader", "java.lang.String", "boolean"))
 				.valueMethod(new Hook(TRANSPLANTS_CLASS_NAME, "overrideLoadResult", "java.lang.Class", "java.lang.ClassLoader", "java.lang.String", "boolean"))
 				.transplant()
 				.request(StackRequest.THIS, StackRequest.PARAM1, StackRequest.PARAM2).build());
-		
+
+		sm.addScript(ScriptBuilder.exitEarly()
+				.target(new MethodTarget("org.codehaus.plexus.classworlds.realm.ClassRealm", "loadClass",
+						"java.lang.Class", "java.lang.String", "boolean"))
+				.decisionMethod(new Hook(TRANSPLANTS_CLASS_NAME, "overrideLoadDecide4ClassRealm", "boolean",
+						"java.lang.ClassLoader", "java.lang.String", "boolean"))
+				.valueMethod(new Hook(TRANSPLANTS_CLASS_NAME, "overrideLoadResult", "java.lang.Class",
+						"java.lang.ClassLoader", "java.lang.String", "boolean"))
+				.transplant().request(StackRequest.THIS, StackRequest.PARAM1, StackRequest.PARAM2).build());
+
 		sm.addScript(ScriptBuilder.addField().setPublic().setVolatile()
 				.fieldType("Ljava/lang/ClassLoader;")
 				.fieldName("lombok$shadowLoader")
 				.targetClass("org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader")
 				.targetClass("org.eclipse.osgi.framework.adapter.core.AbstractClassLoader")
 				.targetClass("org.eclipse.osgi.internal.loader.ModuleClassLoader")
+				.targetClass("org.codehaus.plexus.classworlds.realm.ClassRealm")
+				.targetClass("org.sonar.classloader.ClassRealm")
 				.build());
-		
+
 		sm.addScript(ScriptBuilder.addField().setPublic().setVolatile().setStatic()
 				.fieldType("Ljava/lang/Class;")
 				.fieldName("lombok$shadowLoaderClass")
 				.targetClass("org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader")
 				.targetClass("org.eclipse.osgi.framework.adapter.core.AbstractClassLoader")
 				.targetClass("org.eclipse.osgi.internal.loader.ModuleClassLoader")
+				.targetClass("org.codehaus.plexus.classworlds.realm.ClassRealm")
+				.targetClass("org.sonar.classloader.ClassRealm")
 				.build());
-		
+
 		sm.addScript(ScriptBuilder.addField().setPublic().setStatic().setFinal()
 				.fieldType("Ljava/lang/String;")
 				.fieldName("lombok$location")
 				.targetClass("org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader")
 				.targetClass("org.eclipse.osgi.framework.adapter.core.AbstractClassLoader")
 				.targetClass("org.eclipse.osgi.internal.loader.ModuleClassLoader")
+				.targetClass("org.codehaus.plexus.classworlds.realm.ClassRealm")
+				.targetClass("org.sonar.classloader.ClassRealm")
 				.value(ClassRootFinder.findClassRootOfClass(launchingContext))
 				.build());
 	}
diff --git a/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcherTransplants.java b/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcherTransplants.java
index 402d674..618666d 100644
--- a/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcherTransplants.java
+++ b/src/eclipseAgent/lombok/eclipse/agent/EclipseLoaderPatcherTransplants.java
@@ -50,7 +50,23 @@
 	public static boolean overrideLoadDecide(ClassLoader original, String name, boolean resolve) {
 		return name.startsWith("lombok.");
 	}
-	
+
+	public static boolean overrideLoadDecide4ClassRealm(ClassLoader original, String name, boolean resolve) throws ClassNotFoundException {
+		boolean result = name.startsWith("lombok.");
+		if (result) {
+			ClassLoader l = original;
+			boolean tycho = false;
+			result = false;
+			while ((l != null) && !result) {
+				if (l.toString().contains("tycho")) {
+					result = true;
+				}
+				l = l.getParent();
+			}
+		}
+		return result;
+	}
+
 	public static Class overrideLoadResult(ClassLoader original, String name, boolean resolve) throws ClassNotFoundException {
 		try {
 			Field shadowLoaderField = original.getClass().getField("lombok$shadowLoader");
